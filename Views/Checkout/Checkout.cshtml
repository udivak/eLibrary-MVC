@using Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Text.Json
@model IEnumerable<eLibrary.Models.CartItem>
@{
    ViewData["Title"] = "Checkout";
    Layout = "_Layout";
    
    if (TempData["RemoveFromCartMessage"] != null)
    {
        string msg = TempData["BookTitle"] + TempData["RemoveFromCartMessage"].ToString();
        var jsonMsg = JsonSerializer.Serialize(msg);
        <script>
        alert('@Html.Raw(jsonMsg)');
        </script>
    }
    
}

<link rel="stylesheet" href="~/css/_layout.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/checkout.css" asp-append-version="true"/>

<div class="container-general">
    <main role="main" class="pb-3">
        <div class="container">
            <h1>Checkout</h1>
            @if (!Model.Any())
            {
                <p>No items in the cart.</p>
            }
            else
            {
                <table class="table table-bordered table-striped">
                    <thead>
                    <tr>
                        <th class="text-truncate">Book Title</th>
                        <th class="text-truncate">ISBN</th>
                        <th class="text-truncate">Quantity</th>
                        <th class="text-truncate">Action</th>
                        <th class="text-truncate">On Sale</th>
                        <th class="text-truncate">Price Per Unit</th>
                        <th class="text-truncate">Total Price</th>
                        <th class="text-truncate w-auto">Remove From Cart</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="text-truncate">@item.Title</td>
                            <td class="text-truncate">@item.ISBN</td>
                            <td>@item.Quantity</td>
                            <td>@item.Action</td>
                            @if (item.IsOnSale)
                            {
                                <td>Yes</td>
                            }
                            else
                            {
                                <td>No</td>
                            }
                            <td>@item.Price$</td>
                            <td>@(item.Quantity * item.Price)$</td>
                            <td class="text-center remove-from-cart-col">
                                <a href="@Url.Action("RemoveFromCart", "Book", new { isbn = item.ISBN })" class="btn btn-danger btn-sm">X</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="7" class="text-end">Total Order Price</td>
                        <td class="font-weight-bold">@Model.Sum(item => item.Quantity * item.Price)$</td>
                    </tr>
                    </tfoot>
                </table>
            }
        </div>
    </main>
</div>
@if (Model.Any())
{
    <div class="mx-auto p4 rounded border shadow" id="paypal-container" style="width: 420px;">
        <h2 class="text-center mb-5">Complete your order with PayPal</h2>
        <div id="notification-container"></div>
        <div id="paypal-button-container"></div>
    </div>
    
    <div class="text-center feedback-btn">
        <a href="@Url.Action("eLibraryFeedback", "eLibraryFeedback")" class="btn btn-lg btn-primary feedback-button" id="feedback-button" style="display: none;">Give us Feedback</a>
    </div>
}

<script src="https://www.paypal.com/sdk/js?client-id=@(ViewBag.PaypalClientID)&currency=USD"></script>
<script>
    paypal.Buttons({
        async createOrder() {
            const response = await fetch("@Url.Action("CreateOrder", "Checkout")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    amount : @Model.Sum(item => item.Quantity * item.Price)
                })
            });
            const order = await response.json();
            return order.id;
        },
        async onApprove(data) {
            const response = await fetch("@Url.Action("CompleteOrder", "Checkout")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    orderID: data.orderID
                })
            })

            const details = await response.json();
            if (details == "success") {
                document.getElementById("notification-container").innerHTML =
                    `
                        <div class="alert alert-success alert-dismissible shadow" role="alert">
                            <strong>The Order is created Successfully!</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
                document.getElementById("feedback-button").style.display = "block";

            }
            else {
                document.getElementById("notification-container").innerHTML =
                    `
                        <div class="alert alert-success alert-dismissible shadow" role="alert">
                            <strong>Failed to create the order.</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
            }
        },
    }).render('#paypal-button-container');
</script>

