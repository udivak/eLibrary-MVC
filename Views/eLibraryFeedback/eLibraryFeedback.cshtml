@model eLibrary.Models.eLibraryFeedback
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IHttpContextAccessor _context;
@{
    ViewBag.Title = "Give us Feedback";
    Layout = "_Layout";
    var userEmail = _context.HttpContext.Session.GetString("userEmail");
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
<link rel="stylesheet" href="~/css/_layout.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/eLibraryFeedback.css" asp-append-version="true"/>


<div class="container mt-5">
    <h2 class="text-center">Submit Your Feedback</h2>
    @if (string.IsNullOrEmpty(userEmail))
    {
        <div class="alert alert-warning" role="alert">
            Please <a href="@Url.Action("Login", "User")">log in</a> to submit feedback.
        </div>
    }
    else
    {
        <form action="@Url.Action("eLibraryFeedbackSubmit", "eLibraryFeedback")" method="post">
            <div class="form-group mt-3">
                <label for="email">Email address</label>
                <input type="email" class="form-control" id="email" name="email" value="@userEmail" readonly required>
            </div>

            <div class="form-group mt-3">
                <label for="stars">Rating</label>
                <div class="stars-container" id="stars-container">
                    <!-- Stars will be dynamically created here -->
                </div>
                <input type="hidden" id="stars" name="stars" required>
            </div>
            
            <!-- <div class="form-group mt-3">
                <label for="stars">Rating</label>
                <select class="form-control" id="stars" name="stars" required>
                    <option value="">Select rating</option>
                    <option value="1">1 Star</option>
                    <option value="2">2 Stars</option>
                    <option value="3">3 Stars</option>
                    <option value="4">4 Stars</option>
                    <option value="5">5 Stars</option>
                </select>
            </div> -->

            <div class="form-group mt-3">
                <label for="content">Your Feedback</label>
                <textarea class="form-control" id="content" name="content" rows="4" required></textarea>
            </div>

            <div class="form-group mt-3 text-center">
                <button type="submit" class="btn btn-primary" id="submit-feedback">Submit Feedback</button>
            </div>
        </form>
    }
</div>

<script> 
    document.addEventListener('DOMContentLoaded', function () {
        const starsContainer = document.getElementById('stars-container');
        const hiddenInput = document.getElementById('stars');
        const totalStars = 5;

        // Create stars dynamically
        for (let i = 1; i <= totalStars; i++) {
            const star = document.createElement('span');
            star.textContent = 'â˜…'; // Star symbol
            star.classList.add('star');
            star.dataset.value = i;

            // Add hover effect
            star.addEventListener('mouseover', function () {
                highlightStars(i);
            });

            // Add click event
            star.addEventListener('click', function () {
                selectStars(i);
            });

            // Remove hover effect
            starsContainer.addEventListener('mouseleave', function () {
                highlightStars(hiddenInput.value); // Retain selection on mouse leave
            });

            starsContainer.appendChild(star);
        }

        // Highlight stars based on hover or selection
        function highlightStars(rating) {
            const stars = starsContainer.querySelectorAll('.star');
            stars.forEach(star => {
                if (star.dataset.value <= rating) {
                    star.style.color = 'gold'; // Highlight stars up to the rating
                } else {
                    star.style.color = 'gray'; // Reset stars beyond the rating
                }
            });
        }

        // Select stars on click
        function selectStars(rating) {
            hiddenInput.value = rating; // Update hidden input with selected value
            highlightStars(rating); // Ensure correct stars remain highlighted
        }
    });
</script>