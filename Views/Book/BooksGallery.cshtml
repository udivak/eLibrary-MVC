@using Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Text.Json
@model IEnumerable<eLibrary.Models.Book>
@inject IHttpContextAccessor _context;
@{
    ViewBag.Title = "Books Gallery";
    Layout = "_Layout";
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
<link rel="stylesheet" href="~/css/_layout.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/BooksGallery.css" asp-append-version="true"/>

<div class="featured-books">
    <h1 class="books_gallery_title">Books Gallery</h1>
    <div class="sorting-section">
        <label for="sortBy" style="font-size: 18px;" class="sort-label">Sort By:</label>
        <br />
        <select id="sortBy" class="form-control-sm" placeholder="Sort By">
            <option value="priceAsc">Buy Price: Low to High</option>
            <option value="priceDesc">Buy Price: High to Low</option>
            <option value="priceAsc">Borrow Price: Low to High</option>
            <option value="priceDesc">Borrow Price: High to Low</option>
            <option value="mostPopular">Most Popular</option>
            <option value="genre">Genre</option>
            <option value="year">Year of Publishing</option>
        </select>

        <!-- Genre Selection (Hidden by default) -->
        <div id="genreDiv" style="display: none;">
            <label for="genre" style="font-size: 16px;" class="genre-select">Select Genre: </label>
            <select id="genre" class="form-control-sm">
                <option value="Fiction">Fiction</option>
                <option value="NonFiction">Non-Fiction</option>
                <option value="Mystery">Mystery</option>
                <option value="Fantasy">Fantasy</option>
                <option value="Biography">Biography</option>
                <option value="ScienceFiction">Science Fiction</option>
                <option value="Romance">Romance</option>
                <option value="Thriller">Thriller</option>
                <option value="Horror">Horror</option>
                <option value="Historical">Historical</option>
            </select>
        </div>

        <!-- Year Selection (Hidden by default) -->
        <div id="yearDiv" style="display: none;">
            <label for="year" style="font-size: 16px;" class="year-input">Select Year: </label>
            <input type="number" id="year" class="form-control-sm" placeholder="Enter Year"/>
        </div>

        <!-- Sort Button -->
        <button class="btn btn-primary sort-button" onclick="applySorting()">Sort</button>
    </div>
    <br />
    @{
        int totalBooks = Model.Count();
        int booksPerRow = 4;
        int totalRows = (int)Math.Ceiling(totalBooks / (double)booksPerRow); // Calculate the total number of rows
    }
    @for (int rowIndex = 0; rowIndex < totalRows; rowIndex++)
    {
        <div class="row g-1 justify-content-center">
            @foreach (var book in Model.Skip(rowIndex * booksPerRow).Take(booksPerRow))
            {
                <div class="col-md-3 col-sm-6 col-xs-12 d-flex justify-content-center">
                    <a href="@Url.Action("BookDetails", "Book", new { isbn = book.ISBN })" class="card book-card">
                        <img src="@Url.Content("~/images/"+book.Title+".jpg")" class="card-img-top book-img" alt="@book.Title">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">
                                <span class="underline">Author:</span> @book.Author
                            </p>
                            <p class="card-text">
                                <span class="underline">Publisher:</span> @book.Publisher
                            </p>
                            <p class="card-text">
                                <span class="underline">Year:</span> @book.Year
                            </p>
                            <!-- Pricing details -->
                            @if (book.isOnSale == 1)
                            {
                                <p class="card-text">
                                    <span class="underline">Buy Price:</span> <s>@book.BuyPrice</s>$
                                </p>
                                <p class="card-text">
                                    <span class="sale-price">Sale Buy Price:</span> @(Math.Round(book.BuyPrice * ((100 - book.SalePercentage) / 100.0), 2))$
                                </p>
                            }
                            else
                            {
                                <p class="card-text">
                                    <span class="underline">Buy Price:</span> @book.BuyPrice$
                                </p>
                            }
                            @if (book.isPopular == 0 && book.isOnSale == 1)   // Not Popular and in sale
                            {
                                <p class="card-text">
                                    <span class="underline">Borrow Price:</span> <s>@book.BorrowPrice$</s>
                                </p>
                                <p class="card-text">
                                    <span class="sale-price">Sale Borrow Price:</span> @(Math.Round(book.BorrowPrice * ((100 - book.SalePercentage) / 100.0), 2))$
                                </p>
                            }
                            @if (book.isPopular == 0 && book.isOnSale == 0)   // not popular and not in sale
                            {
                                <p class="card-text">
                                    <span class="underline">Borrow Price:</span> @book.BorrowPrice$
                                </p>
                            }
                            <p class="card-text">
                                <span class="underline">Genre:</span> @book.Genre.ToString()
                            </p>
                            <p class="card-text">
                                <span class="underline">Age Limit:</span> @book.AgeLimit
                            </p>
                        </div>
                    </a>
                </div>
            }
        </div>
    }
</div>

<script>
    // Function to toggle visibility of the genre and year sections based on the selected sort option
    document.getElementById("sortBy").addEventListener("change", function() {
        var sortBy = this.value;
        var genreDiv = document.getElementById("genreDiv");
        var yearDiv = document.getElementById("yearDiv");

        // Hide both genre and year inputs initially
        genreDiv.style.display = "none";
        yearDiv.style.display = "none";

        // Show the appropriate field based on the sort selection
        if (sortBy === 'genre') {
            genreDiv.style.display = "block";  // Show genre select
        } else if (sortBy === 'year') {
            yearDiv.style.display = "block";  // Show year input
        }
    });

    // Function to apply the sorting and refresh the page with the selected parameters
    function applySorting() {
        var sortBy = document.getElementById("sortBy").value;
        var genre = document.getElementById("genre").value;
        var year = document.getElementById("year").value;

        // Redirect to the same page with query parameters for sorting
        var url = '@Url.Action("BooksGallery", "Book")' + '?sortBy=' + sortBy;
        if (sortBy === 'genre') {
            url += '&genre=' + genre;
        } else if (sortBy === 'year') {
            url += '&year=' + year;
        }
        window.location.href = url;  // Redirect with query parameters
    }
</script>


