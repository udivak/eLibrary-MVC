@model eLibrary.Models.BookDetailsViewModel
@inject IHttpContextAccessor _context;
@{
    Layout = "_Layout";
    ViewData["Title"] = $"{Model.Book.Title} Details";
    var userEmail = _context.HttpContext.Session.GetString("userEmail");
    var imgPath = "~/images/" + Model.Book.Title + ".jpg";
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
<link rel="stylesheet" href="~/css/Layout.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/BookDetails.css" asp-append-version="true"/>

<div class="book-details-container">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h4>Book Details</h4>
        </div>
        <div class="card-body d-flex align-items-start">
            <div class="book-image-container">
                <img src="@Url.Content(imgPath)" class="card-img-top book-img" alt="@Model.Book.Title">
            </div>
            <div class="book-details-text">
                <div class="row">
                    <div class="col-6">
                        <p class="data">
                            <span class="underline">Title: </span> @Model.Book.Title
                        </p>
                        <p class="data">
                            <span class="underline">Author:</span> @Model.Book.Author
                        </p>
                        <p class="data">
                            <span class="underline">ISBN:</span> @Model.Book.ISBN
                        </p>
                        <p class="data">
                            <span class="underline">Publisher:</span> @Model.Book.Publisher
                        </p>
                        <p class="data">
                            <span class="underline">Year:</span> @Model.Book.Year
                        </p>
                        <p class="data">
                            <span class="underline">Age Limit:</span> @Model.Book.AgeLimit+
                        </p>
                    </div>
                    <div class="col-6">
                        @if (Model.Book.isOnSale == 1)
                        {
                            <p class="data">
                                <span class="underline">Buy Price:</span> <s>@Model.Book.BuyPrice</s>$
                            </p>
                            <p class="data">
                                <span class="sale-price">Sale Buy Price:</span> @(Math.Round(Model.Book.BuyPrice * ((100 - Model.Book.SalePercentage) / 100.0), 2))$
                            </p>
                        }
                        else
                        {
                            <p class="data">
                                <span class="underline">Buy Price:</span> @Model.Book.BuyPrice$
                            </p>
                        }
                        @if (Model.Book.isPopular == 0 && Model.Book.isOnSale == 1) // Not Popular and in sale
                        {
                            <p class="data">
                                <span class="underline">Borrow Price:</span> <s>@Model.Book.BorrowPrice$</s>
                            </p>
                            <p class="data">
                                <span class="sale-price">Sale Borrow Price:</span> @(Math.Round(Model.Book.BorrowPrice * ((100 - Model.Book.SalePercentage) / 100.0), 2))$
                            </p>
                        }
                        @if (Model.Book.isPopular == 0 && Model.Book.isOnSale == 0) // not popular and not in sale
                        {
                            <p class="data">
                                <span class="underline">Borrow Price:</span> @Model.Book.BorrowPrice$
                            </p>
                        }
                        <p class="data">
                            <span class="underline">Age Limit:</span> @Model.Book.AgeLimit+
                        </p>
                        <p class="data">
                            <span class="underline">Genre:</span> @Model.Book.Genre
                        </p>
                        <p class="data" id="bookFormat">
                            <span class="underline">Format:</span> @Model.Book.Format
                        </p>
                        <!-- Container for Rating Stars -->
                        <div class="rating-container mt-3">
                            <span class="underline">Average Rating:</span>
                            <div id="average-rating-stars" class="stars-container">
                                <!-- Stars will be dynamically created here -->
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.Book.isPopular == 0)
                {
                    <select class="form-control-sm mb-3" id="cartAction" name="Action" required>
                        <option value="" disabled selected>Select an Action</option>
                        <option value="Buy">Buy</option>
                        <option value="Borrow">Borrow</option>
                    </select>
                }
                @if (Model.Book.isPopular == 1)
                {
                    <p>
                        <span class="badge text-black">Most Popular</span>
                    </p>
                }
            </div>
        </div>
        <div class="card-footer text-end">
            @if (ViewBag.RatingFlag != null && ViewBag.RatingFlag == true)       // <!-- Review Button -->
            {
                <button type="button" id="review-btn" class="btn btn-info write-a-review-btn">Write a Review</button>
            }
            @if (_context.HttpContext.Session.GetInt32("isAdmin") == 1)
            {
                <button type="button" id="delete-btn" class="btn btn-danger delete-book-btn">Delete Book</button>
                <button type="button" id="popular-btn" class="btn btn-secondary popular-btn" style="background-color: #9400D3">Mark as Popular</button>
                <button type="button" id="on-sale-btn" class="btn btn-dark on-sale-btn">Mark on Sale</button>
            }
            <a href="@Url.Action("DownloadPdf", "Book", new { isbn = Model.Book.ISBN })" class="btn btn-warning pdf-btn">Summary (PDF)</a>
            <div id="quantityContainer" style="display: none; margin-top: 10px;"></div>
            <button type="button" class="btn btn-success add-to-cart-btn" id="addToCartButton">Add to Cart</button> 
            <button type="button" class="btn btn-success buy-now-btn text-black" id="buynowButton">Buy Now</button>

        </div>
        <div id="feedback-form" class="feedback-form" style="display: none;">
            <div class="review-container">
                <h2 class="text-center text-white">Submit Your Review</h2>
                <form id="reviewForm" class="review-form"
                      action="@Url.Action("BookReviewSubmit", "Book")" method="post">
                    <div class="form-group">
                        <label for="email" class="text-white">Email address</label>
                        <input type="email" class="form-control" id="email" name="Email" value="@userEmail" readonly required>
                    </div>

                    <div class="form-group">
                        <label for="isbn" class="text-white">Book ISBN</label>
                        <input type="text" class="form-control" id="isbn" name="ISBN" value="@Model.Book.ISBN" readonly required>
                    </div>

                    <div class="form-group">
                        <label for="stars" class="text-white">Rating</label>
                        <div class="stars-container" id="stars-container">
                            <!-- Stars will be dynamically created here -->
                        </div>
                        <input type="hidden" id="stars" name="Stars" required>
                    </div>

                    <div class="form-group">
                        <label for="title" class="text-white">Review Title:</label>
                        <input type="text" class="form-control" id="title" name="Title" value="@Model.Book.Title">
                    </div>
                        
                    <div class="form-group">
                        <label for="content" class="text-white">Review Content:</label>
                        <textarea class="form-control" id="content" name="Content" rows="4" required></textarea>
                    </div>

                    <div class="form-group text-center">
                        <button type="submit" class="btn btn-info submit-feedback" id="submit-feedback">Submit Feedback</button>
                    </div>
                </form>
            </div>
            <script> 
                document.addEventListener('DOMContentLoaded', function () {
                    const starsContainer = document.getElementById('stars-container');
                    const hiddenInput = document.getElementById('stars');
                    const totalStars = 5;

                    // Create stars dynamically
                    for (let i = 1; i <= totalStars; i++) {
                        const star = document.createElement('span');
                        star.textContent = 'â˜…'; 
                        star.classList.add('star');
                        star.dataset.value = i;

                        
                        star.addEventListener('mouseover', function () {
                            highlightStars(i);
                        });

                        // Add click event
                        star.addEventListener('click', function () {
                            selectStars(i);
                        });

                        starsContainer.addEventListener('mouseleave', function () {
                            highlightStars(hiddenInput.value);
                        });

                        starsContainer.appendChild(star);
                    }

                    // Highlight stars based on hover or selection
                    function highlightStars(rating) {
                        const stars = starsContainer.querySelectorAll('.star');
                        stars.forEach(star => {
                            if (star.dataset.value <= rating) {
                                star.style.color = 'gold'; // Highlight stars up to the rating
                            } else {
                                star.style.color = 'gray'; // Reset stars beyond the rating
                            }
                        });
                    }

                    // Select stars on click
                    function selectStars(rating) {
                        hiddenInput.value = rating; 
                        highlightStars(rating);
                    }
                });
            </script>
        </div>
        
        <!-- BOOK REVIEWS -->
        @if (Model.BookReviews.Any())
        {
            ViewBag.CurrentBookTitle = @Model.Book.Title;
            @await Html.PartialAsync("_BookReviews", Model.BookReviews)
        }
        else
        {
            <p class="text-white">No reviews available for '@Model.Book.Title'.</p>
        }
    </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Delete a book button
    $(document).ready(function() {
        $('#delete-btn').on('click', function() {
            const url = '@Url.Action("DeleteBook", "Book")';
            const confirmation = confirm("Are you sure you want to delete this book?");
            if (confirmation) {
                $.ajax({
                    url: url,
                    method: 'DELETE',
                    data: { deletedBookISBN: @Model.Book.ISBN },
                    success: function(response) {
                        window.location.href = '@Url.Action("DeleteBookPage", "Book")?deletedBook=' + response.deletedBook + '&title=' + response.title;
                    },
                    error: function() {
                        alert("Failed to delete book. Please try again.");
                    }
                });
            }
        });
    })
    // Mark as popular button
    $(document).ready(function() {
        $('#popular-btn').on('click', function() {
            const url = '@Url.Action("TogglePopular", "Book")';
            const confirmation = confirm("Are you sure you want to mark this book as popular?");
            if (confirmation) {
                $.ajax({
                    url: url,
                    method: 'PATCH',
                    data: { isbn: @Model.Book.ISBN },
                    success: function(response) {
                        alert(response.title + response.msg);
                    },
                    error: function(response) {
                        alert(response.responseJSON.msg);
                    }
                });
            }
        });
    })
    // Mark on sale button
    $(document).ready(function() {
        $('#on-sale-btn').on('click', function() {
            const url = '@Url.Action("ToggleOnSale", "Book")';
            const confirmation = confirm("Are you sure you want to mark this book as on sale?");
            if (confirmation) {
                $.ajax({
                    url: url,
                    method: 'PATCH',
                    data: { isbn: @Model.Book.ISBN },
                    success: function(response) {
                        alert(response.title + response.msg);
                    },
                    error: function(response) {
                        alert(response.responseJSON.msg);
                    }
                });
            }
        });
    })
    
    document.addEventListener('DOMContentLoaded', function () {
        const reviewBtn = document.getElementById('review-btn');
        const feedbackForm = document.getElementById('feedback-form');

        // Toggle visibility of the feedback form when the review button is clicked
        reviewBtn.addEventListener('click', function () {
            feedbackForm.style.display = feedbackForm.style.display === 'none' ? 'block' : 'none';
        });
    });
    // Buy Now
    $(document).ready(function() {
        $('#buynowButton').on('click', function() {
            const isLoggedIn = @Json.Serialize(!string.IsNullOrEmpty(_context.HttpContext.Session.GetString("userName")));
            if (isLoggedIn) {
                $.ajax({
                    url: '@Url.Action("AddToCart", "Book")',
                    data: { isbn: '@Model.Book.ISBN', cartAction: 'Buy' },
                    method: 'POST'
                }).done(function() {
                    window.location.href = '@Url.Action("CheckoutPage", "Checkout")';
                });
            } else {
                alert('Please Log in before proceeding.');
            }
        });
    });
    // Add to Cart
    $(document).ready(function () {
        $('#addToCartButton').on('click', function () {
            let cartAction = $('#cartAction').val();
            const qty = parseInt($('#quantity').val()) || 1;
            const isLoggedIn = @Json.Serialize(!string.IsNullOrEmpty(_context.HttpContext.Session.GetString("userName")));

            @if (Model.Book.isPopular == 0)
            {
                <text>
                    if (!cartAction) {
                        alert("Please select an action (Buy or Borrow) before proceeding.");
                        return;
                    }
                </text>
            }
            else
            {
                <text>
                    cartAction = "Buy";
                </text>
            }

            if (!isLoggedIn) {
                alert("Please Log in before adding to cart.");
                return;
            }

            checkAvailability();

            function checkAvailability() {
                $.ajax({
                    url: '@Url.Action("IsAvailable", "Book")',
                    type: 'GET',
                    data: { isbn: '@Model.Book.ISBN' },
                    success: function (response) {
                        console.log(response);
                        if (response.available) {
                            // Proceed if the book is available
                            proceedWithCartAction();
                        } else {
                            // Ask the user if they want to join the waiting list
                            const joinWaitlist = confirm("This book is currently unavailable. Would you like to join the waiting list?");
                            proceedWithCartAction(joinWaitlist);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred while checking availability:", error);
                        alert("An error occurred. Please try again later.");
                    }
                });
            }

            function proceedWithCartAction(joinWaitlist = false) {
                if (cartAction === "Borrow") {
                    $.ajax({
                        url: '@Url.Action("CanBorrowMore", "User")' + '?bookISBN=@Model.Book.ISBN',
                        type: 'GET',
                        data: { isbn: '@Model.Book.ISBN' },
                        success: function (response) {
                            if (response.status === "OK") {
                                addToCart(joinWaitlist);
                            } else if (response.status === "Error") {
                                alert(response.message); // Display error message
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred:", error);
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                alert(xhr.responseJSON.message);
                            }
                        }
                    });
                } else {
                    addToCart(joinWaitlist); // Proceed directly if action = Buy
                }
            }

            function addToCart(joinWaitlist) {
                window.location.href = '@Url.Action("AddToCart", "Book")' +
                    '?isbn=@Model.Book.ISBN' +
                    '&cartAction=' + encodeURIComponent(cartAction) +
                    '&joinWaitlist=' + joinWaitlist;
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const averageRating = @Model.GetAverageRating();
        const starsContainer = document.getElementById('average-rating-stars');
        const totalStars = 5;

        for (let i = 1; i <= totalStars; i++) {
            const star = document.createElement('span');
            star.classList.add('star');
            star.style.position = 'relative';
            star.style.display = 'inline-block';
            star.style.width = '1.5rem';
            star.style.height = '1.5rem';
            star.style.fontSize = '1.5rem';
            star.style.color = 'gray'; 
            star.textContent = 'â˜…'; 

            if (i <= Math.floor(averageRating)) {
                // Full star
                star.style.color = 'gold';
            } else if (i - averageRating <= 1) {
                // Partially filled star
                const fractionalPart = averageRating - Math.floor(averageRating);
                const overlay = document.createElement('span');
                overlay.textContent = 'â˜…';
                overlay.style.color = 'gold';
                overlay.style.position = 'absolute';
                overlay.style.width = `${fractionalPart * 100}%`;
                overlay.style.height = '100%';
                overlay.style.overflow = 'hidden';
                overlay.style.whiteSpace = 'nowrap';
                overlay.style.top = '0';
                overlay.style.left = '0';
                overlay.style.zIndex = '1';
                star.appendChild(overlay);
            }

            starsContainer.appendChild(star);
        }
    });
</script>




