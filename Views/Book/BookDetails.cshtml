@model eLibrary.Models.BookDetailsViewModel
@inject IHttpContextAccessor _context;
@{
    Layout = "_Layout";
    ViewData["Title"] = $"{Model.Book.Title} Details";
    var userEmail = _context.HttpContext.Session.GetString("userEmail");
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
<link rel="stylesheet" href="~/css/_layout.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/BookDetails.css" asp-append-version="true"/>

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h4>Book Details</h4>
        </div>
        <div class="card-body d-flex align-items-start">
            <div class="book-image-container">
                <img src="~/images/Harry Potter 1.jpg" class="card-img-top book-img" alt="@Model.Book.Title">
            </div>
            <div class="book-details-text">
                <div class="row">
                    <div class="col-6">
                        <p class="data"><strong>Title: </strong> @Model.Book.Title</p>
                        <p class="data"><strong>Author:</strong> @Model.Book.Author</p>
                        <p class="data"><strong>ISBN:</strong> @Model.Book.ISBN</p>
                        <p class="data"><strong>Publisher:</strong> @Model.Book.Publisher</p>
                        <p class="data"><strong>Year:</strong> @Model.Book.Year</p>
                        <p class="data"><strong>Age Limit:</strong> @Model.Book.AgeLimit+</p>
                    </div>
                    <div class="col-6">
                        <p class="data"><strong>Buy Price:</strong> @Model.Book.BuyPrice$</p>
                        @if (Model.Book.isOnSale == 1)
                        {
                            <p class="data"><strong>Sale Buy Price:</strong> @(Math.Round((float)(Model.Book.BuyPrice * (Model.Book.SalePercentage/100)), 2))$</p>
                        }
                        @if (Model.Book.isPopular == 0)
                        {
                            <p class="data"><strong>Borrow Price:</strong> @Model.Book.BorrowPrice$</p>
                            if (Model.Book.isOnSale == 1)
                            {
                                <p class="data"><strong>Sale Borrow Price:</strong> @(Math.Round((float)(Model.Book.BorrowPrice * (Model.Book.SalePercentage/100)), 2))$</p>
                            }
                        }
                        <p class="data"><strong>Age Limit:</strong> @Model.Book.AgeLimit+</p>
                        <p class="data"><strong>Genre:</strong> @Model.Book.Genre</p>
                        <p class="data" id="bookFormat"><strong>Format:</strong> @Model.Book.Format</p>
                    </div>
                </div>
                @if (Model.Book.isPopular == 0)
                {
                    <select class="form-control-sm mb-3" id="cartAction" name="Action" required>
                        <option value="" disabled selected>Select an Action</option>
                        <option value="Buy">Buy</option>
                        <option value="Borrow">Borrow</option>
                    </select>
                }
            </div>
        </div>
        <div class="card-footer text-end">
            @if (ViewBag.RatingFlag != null && ViewBag.RatingFlag == true)       // <!-- Review Button -->
            {
               <button type="button" id="review-btn" class="btn btn-info write-a-review-btn">Write a Review</button>
            }
            <a href="@Url.Action("DownloadPdf", "Book", new { isbn = Model.Book.ISBN })" class="btn btn-warning">Download PDF</a>
            <div id="quantityContainer" style="display: none; margin-top: 10px;"></div>
            <button type="button" class="btn btn-secondary btn-back" onclick="window.history.back()">Back</button>
            <button type="button" class="btn btn-success" id="addToCartButton">Add to Cart</button>
        </div>
        <div id="feedback-form" class="feedback-form" style="display: none;">
            <div class="review-container">
                <h2 class="text-center text-white">Submit Your Review</h2>
                <form id="reviewForm" class="review-form"
                      action="@Url.Action("BookReviewSubmit", "Book")" method="post">
                    <div class="form-group">
                        <label for="email" class="text-white">Email address</label>
                        <input type="email" class="form-control" id="email" name="Email" value="@userEmail" readonly required>
                    </div>

                    <div class="form-group">
                        <label for="isbn" class="text-white">Book ISBN</label>
                        <input type="text" class="form-control" id="isbn" name="ISBN" value="@Model.Book.ISBN" readonly required>
                    </div>

                    <div class="form-group">
                        <label for="stars" class="text-white">Rating</label>
                        <div class="stars-container" id="stars-container">
                            <!-- Stars will be dynamically created here -->
                        </div>
                        <input type="hidden" id="stars" name="Stars" required>
                    </div>

                    <div class="form-group">
                        <label for="title" class="text-white">Review Title:</label>
                        <input type="text" class="form-control" id="title" name="Title" value="@Model.Book.Title">
                    </div>
                        
                    <div class="form-group">
                        <label for="content" class="text-white">Review Content:</label>
                        <textarea class="form-control" id="content" name="Content" rows="4" required></textarea>
                    </div>

                    <div class="form-group text-center">
                        <button type="submit" class="btn btn-info" id="submit-feedback">Submit Feedback</button>
                    </div>
                </form>
            </div>
            <script> 
                document.addEventListener('DOMContentLoaded', function () {
                    const starsContainer = document.getElementById('stars-container');
                    const hiddenInput = document.getElementById('stars');
                    const totalStars = 5;

                    // Create stars dynamically
                    for (let i = 1; i <= totalStars; i++) {
                        const star = document.createElement('span');
                        star.textContent = 'â˜…'; // Star symbol
                        star.classList.add('star');
                        star.dataset.value = i;

                        // Add hover effect
                        star.addEventListener('mouseover', function () {
                            highlightStars(i);
                        });

                        // Add click event
                        star.addEventListener('click', function () {
                            selectStars(i);
                        });

                        // Remove hover effect
                        starsContainer.addEventListener('mouseleave', function () {
                            highlightStars(hiddenInput.value); // Retain selection on mouse leave
                        });

                        starsContainer.appendChild(star);
                    }

                    // Highlight stars based on hover or selection
                    function highlightStars(rating) {
                        const stars = starsContainer.querySelectorAll('.star');
                        stars.forEach(star => {
                            if (star.dataset.value <= rating) {
                                star.style.color = 'gold'; // Highlight stars up to the rating
                            } else {
                                star.style.color = 'gray'; // Reset stars beyond the rating
                            }
                        });
                    }

                    // Select stars on click
                    function selectStars(rating) {
                        hiddenInput.value = rating; // Update hidden input with selected value
                        highlightStars(rating); // Ensure correct stars remain highlighted
                    }
                });
            </script>
        </div>
        <!-- BOOK REVIEWS -->
        @if (Model.BookReviews.Any())
        {
            ViewBag.CurrentBookTitle = @Model.Book.Title;
            @await Html.PartialAsync("_BookReviews", Model.BookReviews)
        }
        else
        {
            <p class="text-white">No reviews available for '@Model.Book.Title'.</p>
        }
    </div>
</div>
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const reviewBtn = document.getElementById('review-btn');
        const feedbackForm = document.getElementById('feedback-form');

        // Toggle visibility of the feedback form when the review button is clicked
        reviewBtn.addEventListener('click', function () {
            feedbackForm.style.display = feedbackForm.style.display === 'none' ? 'block' : 'none';
        });
    });
    // Add to Cart
    $(document).ready(function() {
        $('#addToCartButton').on('click', function() {
            let cartAction = $('#cartAction').val();
            const qty = parseInt($('#quantity').val()) || 1;
            const isLoggedIn = @Json.Serialize(!string.IsNullOrEmpty(_context.HttpContext.Session.GetString("userName")));

            @if (Model.Book.isPopular == 0)
            {
                <text>
                    if (!cartAction) {
                        alert("Please select an action (Buy or Borrow) before proceeding.");
                        return;
                    }
                </text>
            }
            else
            {
                <text>
                    cartAction = "Buy";
                </text>
            }

            if (!isLoggedIn) {
                alert("Please Log in before adding to cart.");
                return;
            }

            // If action is Borrow, check if user can borrow more books
            if (cartAction === "Borrow") {
                $.ajax({
                    url: '@Url.Action("CanBorrowMore", "User")',
                    type: 'GET',
                    success: function(response) {
                        // If the user can borrow more books, proceed with adding to cart
                        if (response.status === "OK") {
                            addToCart();
                        } else {
                            alert(response.responseText); // Display error message
                        }
                    },
                    error: function(xhr, status, error) {
                        alert("You already have 3 books borrowed");
                    }
                });
            } else {
                addToCart(); // Proceed directly if action is Buy
            }

            function addToCart() {
                const url = '@Url.Action("AddToCart", "Book")' +
                    '?isbn=@Model.Book.ISBN' +
                    '&cartAction=' + encodeURIComponent(cartAction) +
                    '&qty=' + encodeURIComponent(qty);

                window.location.href = url;
            }
        });
    });

</script>



